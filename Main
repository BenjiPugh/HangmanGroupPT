#Start Code: Wenxin on dictionary, benji user input and verification, madison on round, benji on list work

import random

words = ["hello", "python", "program", "love", "save", "exercise", 
"funny", "trust", "respect", "start"]
def choice():
    return random.choice(words)
word1 = choice()
print(word1)

#writes out underscores in place of each letter
word_lines = ["_ "] * len(word1)
print(" ".join(word_lines))


#Check user input and return it if valid

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
def is_letter(user_input):
    if user_input in alphabet:
        return True
    else:
	    return False
    
def get_guess():
    guess = input("Type in a one letter guess: ")
    while is_letter(guess) == False:
        guess = input("whoops, that wasn't a letter, please type another: " )
    else:
        print(guess)
        return guess

user_guess = get_guess()


#checks if guess is in word to tell if hangman should be created
def check_guess(guess, word):
  if guess in word:
    return True
  else:
    return False

#finds guess placement in list and returns word placement to allow word lines to be replaced with correctly guessed letters
def word_placement(word, guess):
  placement = []
  for index in range(len(word)):
    if guess == word[index]:
      placement.append(index)
  return placement
  
#changes word_lines to include correctly guessed letters
def word_reveal(word, lines, guess):
  for placement in word_placement(word, guess):
    lines[placement] = word[placement]
  
  
#testing out functions
print(check_guess(user_guess, word1))
word_reveal(word1, word_lines, user_guess)
print(" ".join(word_lines))
